{"ts":1369869501239,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class CommentsController < ApplicationController\n  before_action :signed_in_user, only: [:create, :destroy]\n  before_action :correct_user,   only: :destroy\n\n  def create\n    response.headers[\"Content-Type\"] = \"text/javascript\"\n\n    attributes = params.require(:comment).permit(:content)\n    @commentable = find_commentable\n    @comment = current_user.comments.build(params[:content])\n\n    if @comment.save\n      flash[:success] = \"comment created!\"\n\n      @message = Comment.create(attributes)\n      $redis.publish('comments.create', @comment.to_json)\n\n      redirect_to root_url\n    else\n      @feed_items = []\n      render 'landing_pages/home'\n    end\n  end\n  \n  def destroy\n    @comment.destroy\n    redirect_to root_url\n  end\n\n  private\n\n  def comment_params\n    params.require(:comment).permit(:content)\n  end\n\n  def correct_user\n    @comment = current_user.comments.find_by(id: params[:id])\n    redirect_to root_url if @comment.nil?\n  end\n  \n  def events\n    response.headers[\"Content-Type\"] = \"text/event-stream\"\n    redis = Redis.new\n    redis.psubscribe('comments.*') do |on|\n      on.pmessage do |pattern, event, data|\n        response.stream.write(\"event: #{event}\\n\")\n        response.stream.write(\"data: #{data}\\n\\n\")\n      end\n    end\n  rescue IOError\n    logger.info \"Stream closed\"\n  ensure\n    redis.quit\n    response.stream.close\n  end\n  \n  def find_commentable\n    params.each do |name, value|\n      if name =~ /(.+)_id$/\n        return $1.classify.constantize.find(value)\n      end\n    end\n    nil\n  end\nend"]],"start1":0,"start2":0,"length1":0,"length2":1526}]],"length":1526}
